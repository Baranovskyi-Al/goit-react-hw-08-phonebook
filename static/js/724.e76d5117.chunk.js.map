{"version":3,"file":"static/js/724.e76d5117.chunk.js","mappings":"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","sources":["../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsListItem/ContactsListItem.module.css?89f9","components/ContactsList/ContactsListItem/ContactsListItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsList/ContactsList.module.css?d8e9","components/ContactsList/ContactsList.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactsFilter/ContactsFilter.module.css?d01d","components/ContactsFilter/ContactsFilter.jsx","pages/ContactsPage/ContactsPage.jsx"],"sourcesContent":["import { urlAlphabet } from './url-alphabet/index.js'\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ContactForm_section__cCE6r\",\"title\":\"ContactForm_title__Yq93-\",\"label\":\"ContactForm_label__Cuwyx\",\"input\":\"ContactForm_input__mdfqz\",\"button\":\"ContactForm_button__+0JP9\"};","import { useState, useEffect } from 'react';\r\nimport { nanoid } from 'nanoid';\r\nimport {\r\n  useGetContactsQuery,\r\n  useAddContactMutation,\r\n} from 'contactsStorage/contactsAPI';\r\nimport Notiflix from 'notiflix';\r\n\r\nimport styles from './ContactForm.module.css';\r\n\r\nexport const ContactForm = () => {\r\n  const [form, setForm] = useState({ name: '', number: '' });\r\n  const { data: contacts } = useGetContactsQuery();\r\n  const [addContact, { isSuccess, isLoading }] = useAddContactMutation();\r\n\r\n  const handleChange = element => {\r\n    const { name, value } = element.currentTarget;\r\n    setForm(prevForm => ({ ...prevForm, [name]: value }));\r\n  };\r\n\r\n  const handleSubmit = element => {\r\n    element.preventDefault();\r\n    const data = { id: nanoid(), ...form };\r\n    if (\r\n      contacts.find(\r\n        contact => contact.name.toLowerCase() === data.name.toLowerCase()\r\n      )\r\n    ) {\r\n      inputClean();\r\n      return Notiflix.Notify.failure(`${data.name} is already in phonebook`);\r\n    }\r\n    addContact(data);\r\n  };\r\n\r\n  const inputClean = () => {\r\n    setForm({ name: '', number: '' });\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (isSuccess) {\r\n      inputClean();\r\n    }\r\n  }, [isSuccess]);\r\n\r\n  const { name, number } = form;\r\n  return (\r\n    <div className={styles.section}>\r\n      <h2 className={styles.title}>Add contacts to phone book</h2>\r\n      <form onSubmit={handleSubmit}>\r\n        <label className={styles.label}>\r\n          Name\r\n          <input\r\n            className={styles.input}\r\n            type=\"text\"\r\n            name=\"name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\r\n            required\r\n            value={name}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <label className={styles.label}>\r\n          Number\r\n          <input\r\n            className={styles.input}\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\r\n            required\r\n            value={number}\r\n            onChange={handleChange}\r\n          />\r\n        </label>\r\n        <button type=\"submit\" className={styles.button} disabled={isLoading}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"ContactsListItem_item__ppG7P\",\"name\":\"ContactsListItem_name__WgQ3B\",\"number\":\"ContactsListItem_number__EWp-C\",\"button\":\"ContactsListItem_button__+ttsW\"};","import PropTypes from 'prop-types';\r\nimport { useDeleteContactMutation } from 'contactsStorage/contactsAPI';\r\n\r\nimport styles from './ContactsListItem.module.css';\r\n\r\nexport const ContactsListItem = ({ id, name, number }) => {\r\n  const [deleteContact, { isLoading }] = useDeleteContactMutation();\r\n\r\n  return (\r\n    <li id={id} className={styles.item}>\r\n      <span className={styles.name}>{name}</span>:{' '}\r\n      <span className={styles.number}>{number}</span>\r\n      <button\r\n        className={styles.button}\r\n        onClick={() => deleteContact(id)}\r\n        disabled={isLoading}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactsListItem.propTypes = {\r\n  id: PropTypes.string.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ContactsList_section__1AJK2\",\"title\":\"ContactsList_title__5xqjp\",\"list\":\"ContactsList_list__w4+of\",\"text\":\"ContactsList_text__ToaUz\"};","import { useSelector } from 'react-redux';\r\nimport { useGetContactsQuery } from 'contactsStorage/contactsAPI';\r\nimport { Rings } from 'react-loader-spinner';\r\nimport { ContactsListItem } from './ContactsListItem';\r\n\r\nimport styles from './ContactsList.module.css';\r\n\r\nexport const ContactsList = () => {\r\n  const { data: contacts, isLoading, isSuccess } = useGetContactsQuery();\r\n  const filter = useSelector(state => state.filter);\r\n\r\n  const getContacts = () => {\r\n    if (filter === '') {\r\n      return contacts;\r\n    }\r\n\r\n    return contacts.filter(contact =>\r\n      contact.name.toLowerCase().includes(filter.toLowerCase())\r\n    );\r\n  };\r\n\r\n  const items = getContacts();\r\n  return (\r\n    <div className={styles.section}>\r\n      <h2 className={styles.title}>Phone book</h2>\r\n      <ul className={styles.list}>\r\n        {isLoading && (\r\n          <div className={styles.loader}>\r\n            <Rings\r\n              height=\"200\"\r\n              width=\"200\"\r\n              color=\"#0031f9\"\r\n              ariaLabel=\"loading\"\r\n            />\r\n          </div>\r\n        )}\r\n        {isSuccess &&\r\n          items.map(({ id, name, number }) => (\r\n            <ContactsListItem key={id} id={id} name={name} number={number} />\r\n          ))}\r\n        {items && items.length === 0 && (\r\n          <span className={styles.text}> Phone book is empty </span>\r\n        )}\r\n      </ul>\r\n    </div>\r\n  );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"section\":\"ContactsFilter_section__iM86W\",\"title\":\"ContactsFilter_title__J2+4o\",\"input\":\"ContactsFilter_input__yLDr3\"};","import { useSelector, useDispatch } from 'react-redux';\r\nimport { changeFilter } from 'contactsStorage/contactsSlice';\r\n\r\nimport styles from './ContactsFilter.module.css';\r\n\r\nexport const ContactsFilter = () => {\r\n  const dispatch = useDispatch();\r\n  const filter = useSelector(state => state.contacts.filter);\r\n\r\n  const onChange = element => {\r\n    dispatch(changeFilter(element.currentTarget.value));\r\n  };\r\n\r\n  return (\r\n    <div className={styles.section}>\r\n      <h2 className={styles.title}>Find contacts by name</h2>\r\n      <input\r\n        className={styles.input}\r\n        onChange={onChange}\r\n        value={filter}\r\n      ></input>\r\n    </div>\r\n  );\r\n};\r\n","import { ContactForm } from 'components/ContactForm';\r\nimport { ContactsList } from 'components/ContactsList';\r\nimport { ContactsFilter } from 'components/ContactsFilter';\r\n\r\nexport default function ContactsPage() {\r\n  return (\r\n    <>\r\n      <ContactForm />\r\n      <ContactsFilter />\r\n      <ContactsList />\r\n    </>\r\n  );\r\n}\r\n"],"names":["nanoid","size","id","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","ContactForm","useState","name","number","form","setForm","contacts","useGetContactsQuery","data","useAddContactMutation","addContact","isSuccess","isLoading","handleChange","element","currentTarget","value","prevForm","inputClean","useEffect","className","styles","onSubmit","preventDefault","find","contact","toLowerCase","Notiflix","type","pattern","title","required","onChange","disabled","ContactsListItem","useDeleteContactMutation","deleteContact","onClick","ContactsList","filter","useSelector","state","items","includes","height","width","color","ariaLabel","map","length","ContactsFilter","dispatch","useDispatch","changeFilter","ContactsPage"],"sourceRoot":""}